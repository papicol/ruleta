'use client'

import { useEffect, useState, useRef, useCallback } from 'react'
import { Card } from '../components/ui/card'

interface RouletteWheelProps {
  isSpinning: boolean
  winningNumber: number | null
  onSpinComplete?: () => void
}

// Números de la ruleta europea en orden exacto del casino
const rouletteNumbers = [
  0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26
]

const getNumberColor = (num: number): string => {
  if (num === 0) return 'green'
  const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
  return redNumbers.includes(num) ? 'red' : 'black'
}

export default function ProfessionalCasinoRoulette({ isSpinning, winningNumber, onSpinComplete }: RouletteWheelProps) {
  const [wheelRotation, setWheelRotation] = useState(0)
  const [ballAngle, setBallAngle] = useState(0)
  const [ballRadius, setBallRadius] = useState(240)
  const [ballSpeed, setBallSpeed] = useState(0)
  const [phase, setPhase] = useState<'idle' | 'spinning' | 'bouncing' | 'settled'>('idle')
  const [bounceCount, setBounceCount] = useState(0)
  const [soundEffect, setSoundEffect] = useState<'spin' | 'bounce' | 'settle' | null>(null)
  const [initialSpeeds, setInitialSpeeds] = useState({ wheel: 0, ball: 0 })
  
  const animationRef = useRef<number>(0)
  const startTimeRef = useRef<number>(0)
  const lastBounceTime = useRef<number>(0)

  const getNumberPosition = useCallback((index: number) => {
    const angle = (index * 360) / 37
    const radius = 165
    // Ajuste preciso para centrado numérico
    const x = radius * Math.cos((angle - 90) * (Math.PI / 180))
    const y = radius * Math.sin((angle - 90) * (Math.PI / 180))
    return { angle, x, y }
  }, [])

  const renderNumber = useCallback((number: number, index: number) => {
    const { x, y, angle } = getNumberPosition(index)
    const color = getNumberColor(number) as 'red' | 'black' | 'green'
    const isWinning = winningNumber === number && phase === 'settled'
    
    const colorClasses: Record<'red' | 'black' | 'green', string> = {
      red: 'bg-gradient-to-br from-red-500 via-red-700 to-red-900 border-red-400',
      black: 'bg-gradient-to-br from-gray-700 via-gray-900 to-black border-gray-500',
      green: 'bg-gradient-to-br from-green-500 via-green-700 to-green-900 border-green-400'
    }
    
    return (
      <div
        key={number}
        className="absolute origin-center"
        style={{
          transform: `translate(calc(-50% + ${x}px), calc(-50% + ${y}px)) rotate(${angle + 90}deg)`,
          filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))',
          zIndex: isWinning ? 20 : 10
        }}
      >
        <div 
          className={`w-10 h-10 rounded-lg border-2 flex items-center justify-center text-white text-sm font-bold 
            transition-all duration-300 ${colorClasses[color]}
            ${isWinning ? 'ring-4 ring-yellow-300 scale-125 shadow-glow animate-pulse' : ''}`}
        >
          <span className="transform -rotate-90 drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]">
            {number}
          </span>
          
          {/* Efecto de profundidad */}
          <div className="absolute inset-0 rounded-lg bg-gradient-to-b from-white/15 to-transparent opacity-50" />
        </div>
      </div>
    )
  }, [getNumberPosition, winningNumber, phase])

  return (
    <div className="relative flex items-center justify-center min-h-[80vh] bg-gradient-to-br from-green-900 to-emerald-950 p-4 md:p-8">
      {/* Fondo mejorado */}
      <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-emerald-800/30 via-emerald-900/90 to-emerald-950" />
      
      <div className="relative w-full max-w-[700px] mx-auto">
        <Card className="relative bg-gradient-to-br from-amber-800 via-amber-900 to-amber-950 p-8 md:p-12 rounded-full shadow-2xl border-8 border-amber-900 aspect-square flex items-center justify-center">
          
          {/* Indicador de sonido ajustado */}
          {soundEffect && (
            <div className="absolute top-6 right-6 text-yellow-300/80 text-sm font-bold flex items-center gap-2">
              {soundEffect === 'spin' && <><span className="animate-spin">🌀</span> Girando...</>}
              {soundEffect === 'bounce' && <><span className="animate-bounce">🏀</span> Rebotando...</>}
              {soundEffect === 'settle' && <><span className="animate-pulse">🎯</span> Asentando...</>}
            </div>
          )}
          
          <div className="relative w-full h-full flex items-center justify-center">
            {/* Rueda principal con mejor iluminación */}
            <div
              className="absolute inset-0 rounded-full bg-gradient-to-br from-amber-800 via-amber-900 to-amber-950 shadow-2xl 
                transition-transform duration-300 ease-out transform-gpu border-4 border-amber-700"
              style={{
                transform: `rotate(${wheelRotation}deg)`,
              }}
            >
              {/* Divisores mejorados */}
              {rouletteNumbers.map((_, index) => {
                const { angle } = getNumberPosition(index)
                return (
                  <div
                    key={`divider-${index}`}
                    className="absolute h-[120px] w-0.5 bg-gradient-to-b from-amber-500/50 via-amber-600 to-amber-700/50"
                    style={{
                      transform: `rotate(${angle}deg) translateY(-190px)`,
                      transformOrigin: 'bottom center',
                      top: '50%',
                      left: '50%',
                    }}
                  />
                )
              })}
              
              {/* Números */}
              {rouletteNumbers.map(renderNumber)}
              
              {/* Centro de la rueda mejorado */}
              <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-40 h-40 rounded-full 
                bg-gradient-to-br from-amber-300 via-amber-500 to-amber-700 shadow-2xl border-4 border-amber-200/50">
                <div className="absolute inset-2 rounded-full bg-gradient-to-br from-gray-800 to-gray-900 border-4 border-amber-600/30 shadow-inner">
                  {/* Marcas radiales mejoradas */}
                  {Array.from({ length: 36 }, (_, i) => (
                    <div
                      key={i}
                      className="absolute h-6 w-0.5 bg-gradient-to-b from-amber-400 to-amber-600"
                      style={{
                        transform: `rotate(${i * 10}deg) translateY(-28px)`,
                        transformOrigin: 'bottom center'
                      }}
                    />
                  ))}
                  
                  {/* Efecto de giro central */}
                  <div className="absolute inset-0 rounded-full border-2 border-amber-500/20 animate-pulse" />
                </div>
              </div>
            </div>
            
            {/* Bola con animaciones mejoradas */}
            <div
              className="absolute w-5 h-5 z-30 transform-gpu transition-transform duration-300 ease-out"
              style={{
                transform: `rotate(${ballAngle}deg) translateY(-${ballRadius}px)`,
                transition: phase === 'settled' 
                  ? 'all 0.8s cubic-bezier(0.4, 0, 0.2, 1)' 
                  : 'transform 0.1s linear'
              }}
            >
              {/* ... (resto del código de la bola se mantiene similar con ajustes de sombras) */}
            </div>

            {/* Marcador de posición mejorado */}
            <div className="absolute top-2 left-1/2 -translate-x-1/2 z-40">
              <div className="relative">
                <div className="w-4 h-6 bg-red-600 rounded-t-full shadow-xl border-t-2 border-red-400" />
                <div className="absolute bottom-0 left-1/2 -translate-x-1/2 w-3 h-3 bg-red-500 rounded-full shadow-sm animate-pulse" />
              </div>
            </div>

            {/* Efectos de iluminación dinámicos */}
            <div className="absolute inset-0 rounded-full animate-rotate opacity-30"
              style={{
                background: `conic-gradient(
                  from 0deg at 50% 50%,
                  rgba(255,223,0,0.3) 0%,
                  rgba(255,105,0,0.1) 20%,
                  rgba(0,0,0,0) 40%,
                  rgba(0,255,255,0.1) 60%,
                  rgba(255,223,0,0.3) 100%
                )`
              }}
            />
          </div>

          {/* ... (resto del componente se mantiene similar con mejoras en los textos) */}
        </Card>
      </div>
    </div>
  )
}